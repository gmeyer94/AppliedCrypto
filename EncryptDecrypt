import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;

import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;

import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.util.encoders.Hex;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;

public class EncryptDecrypt {
	
    public static void main(String [] args) throws Exception {
        Security.insertProviderAt(new BouncyCastleProvider(), 1);
        
        Cipher newCipher = Cipher.getInstance("AES/CBC/NOPADDING");
        
        //System.out.println(newCipher.getBlockSize());
        
        /*
        ECCurve curve = new ECCurve.F2m(
                239, // m
                36, // k
                new BigInteger("32010857077C5431123A46B808906756F543423E8D27877578125778AC76", 16), // a
                new BigInteger("790408F2EEDAF392B012EDEFB3392F30F4327C0CA3F31FC383C422AA8C16", 16)); // b
        ECParameterSpec params = new ECParameterSpec(
                curve,
                curve.decodePoint(Hex.decode("0457927098FA932E7C0A96D3FD5B706EF7E5F5C156E16B7E7C86038552E91D61D8EE5077C33FECF6F1A16B268DE469C3C7744EA9A971649FC7A9616305")), // G
                new BigInteger("220855883097298041197912187592864814557886993776713230936715041207411783"), // n
                BigInteger.valueOf(4)); // h
        ECPrivateKeySpec priKeySpec = new ECPrivateKeySpec(
                new BigInteger("145642755521911534651321230007534120304391871461646461466464667494947990"), // d
                params);
        ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(
                curve.decodePoint(Hex.decode("045894609CCECF9A92533F630DE713A958E96C97CCB8F5ABB5A688A238DEED6DC2D9D0C94EBFB7D526BA6A61764175B99CB6011E2047F9F067293F57F5")), // Q
                params);
		*/
        //FileInputStream inputTextFile = null;
        
        FileInputStream inputTextFile = new FileInputStream("C:/Users/Garrison/Music/Ween-B-Sides, Demos, & Rarities (4-Disc Comp.).flac/tracklist.txt");
                
        InputStreamReader isr = new InputStreamReader(inputTextFile);
        BufferedReader br = new BufferedReader(isr);
        
        String line;
        String plaintext = "";
        
        while ((line = br.readLine()) != null) {
            //System.out.println(line);
        	plaintext += line;
        	plaintext += "\n";
         }
        
        br.close();
        
        System.out.println(plaintext);
        
        //String plaintext = "This is a long and unique string value that will be encoded and then decoded using the bouncy castle AES engine";      // response from the Python script

        
        //System.out.println("made it");
        
        byte[] plainAsBytes = plaintext.getBytes();

        
        byte[] IV = generateIV(newCipher);      

        byte[] Key = generateKey(newCipher);
        

        byte[] encryptedData = encrypt(plainAsBytes, Key, IV);

        
        String ciphertext = new String(encryptedData);
        
        PrintWriter cipherOut = new PrintWriter("C:/Users/Garrison/Documents/ciphertext.txt");
        cipherOut.println(ciphertext);
        
        cipherOut.close();
        
        
        
        FileInputStream inputCipherFile = new FileInputStream("C:/Users/Garrison/Documents/ciphertext.txt");
        
        InputStreamReader isr2 = new InputStreamReader(inputCipherFile);
        BufferedReader br2 = new BufferedReader(isr2);
        
        String line2;
        String readCiphertext = "";
        
        while ((line2 = br2.readLine()) != null) {
            //System.out.println(line);
        	readCiphertext += line2;
        	readCiphertext += "\n";
         }
        
        br2.close();
        
        byte[] readEncryptedData = readCiphertext.getBytes();
        
        byte[] decryptedData = decrypt(encryptedData, Key, IV);
        //byte[] decryptedData = decrypt(encryptedData, Key, IV);

        String recoveredPlaintext = new String(decryptedData);
        
        PrintWriter decryptOut = new PrintWriter("C:/Users/Garrison/Documents/recoveredPlaintext.txt");
        decryptOut.println(recoveredPlaintext);
        
        decryptOut.close();
        
        System.out.println(plaintext);
        System.out.println(ciphertext);
        System.out.println(recoveredPlaintext);
    }	
	
	private static byte[] cipherData(PaddedBufferedBlockCipher cipher, byte[] data)
	        throws Exception
	{
	    int minSize = cipher.getOutputSize(data.length);
	    byte[] outBuf = new byte[minSize];
	    int length1 = cipher.processBytes(data, 0, data.length, outBuf, 0);
	    int length2 = cipher.doFinal(outBuf, length1);
	    int actualLength = length1 + length2;
	    byte[] result = new byte[actualLength];
	    System.arraycopy(outBuf, 0, result, 0, result.length);
	    return result;
	}

	private static byte[] decrypt(byte[] cipher, byte[] key, byte[] iv) throws Exception
	{
	    PaddedBufferedBlockCipher aes = new PaddedBufferedBlockCipher(new CBCBlockCipher(
	            new AESEngine()));
	    CipherParameters ivAndKey = new ParametersWithIV(new KeyParameter(key), iv);
	    aes.init(false, ivAndKey);
	    return cipherData(aes, cipher);
	}

	private static byte[] encrypt(byte[] plain, byte[] key, byte[] iv) throws Exception
	{
	    PaddedBufferedBlockCipher aes = new PaddedBufferedBlockCipher(new CBCBlockCipher(
	            new AESEngine()));
	    CipherParameters ivAndKey = new ParametersWithIV(new KeyParameter(key), iv);
	    aes.init(true, ivAndKey);
	    return cipherData(aes, plain);
	}
	
	private static byte [] generateIV(Cipher cipher) throws Exception {
        byte [] ivBytes = new byte[cipher.getBlockSize()];
        random.nextBytes(ivBytes);
        return ivBytes;
    }
	
	private static byte [] generateKey(Cipher cipher) throws Exception {
        byte [] keyBytes = new byte[16];
        random.nextBytes(keyBytes);
        return keyBytes;
    }
	
	private static final SecureRandom random = new SecureRandom();
}

