import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;

import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;

import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.util.encoders.Base64;
import org.bouncycastle.util.encoders.Hex;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;

public class EncryptDecrypt {
	
    public static void main(String [] args) throws Exception {
        Security.insertProviderAt(new BouncyCastleProvider(), 1);
        
        Cipher newCipher = Cipher.getInstance("AES/CBC/NOPADDING");
        

        
        FileInputStream inputTextFile = new FileInputStream("C:/Users/Garrison/Music/Ween-B-Sides, Demos, & Rarities (4-Disc Comp.).flac/tracklist.txt");
                
        InputStreamReader isr = new InputStreamReader(inputTextFile);
        BufferedReader br = new BufferedReader(isr);
        
        String line;
        String plaintext = "";
        
        while ((line = br.readLine()) != null) {
            //System.out.println(line);
        	plaintext += line;
        	plaintext += "\n";
         }
        
        br.close();
        
        //System.out.println(plaintext);
        
        //String plaintext = "This is a long and unique string value that will be encoded and then decoded using the bouncy castle AES engine";      // response from the Python script

        
        //System.out.println("made it");
        
        byte[] plainAsBytes = plaintext.getBytes();

        
        byte[] IV = generateIV(newCipher);      

        byte[] Key = generateKey(newCipher);
        

        byte[] encryptedData = encrypt(plainAsBytes, Key, IV);

        
        //String ciphertext = new String(encryptedData, StandardCharsets.UTF_8);
        
        String ciphertext = Base64.toBase64String(encryptedData);
        
        PrintWriter cipherOut = new PrintWriter("C:/Users/Garrison/Documents/ciphertext.txt");
        cipherOut.println(ciphertext);
        
        cipherOut.close();
        
        
        
        FileInputStream inputCipherFile = new FileInputStream("C:/Users/Garrison/Documents/ciphertext.txt");
        
        InputStreamReader isr2 = new InputStreamReader(inputCipherFile);
        BufferedReader br2 = new BufferedReader(isr2);
        
        String line2;
        String readCiphertext = "";
        
        while ((line2 = br2.readLine()) != null) {
            //System.out.println(line);
        	readCiphertext += line2;
        	//readCiphertext += "\n";
         }
        
        br2.close();
        
        
        
        byte[] readEncryptedData = Base64.decode(readCiphertext);
        /*
        String[] byteValues = readCiphertext.substring(1, readCiphertext.length() - 1).split(",");
        byte[] readEncryptedData = new byte[byteValues.length];
        
        for (int i=0, len=readEncryptedData.length; i<len; i++) {
        	readEncryptedData[i] = Byte.parseByte(byteValues[i].trim());     
        }
        */
        
        /*
        if (readCiphertext != ciphertext){
        	System.out.println(ciphertext);
        	System.out.println("break");
        	System.out.println(readCiphertext);
        	return;
        	
        }
        */
        byte[] decryptedData = decrypt(readEncryptedData, Key, IV);
        //byte[] decryptedData = decrypt(encryptedData, Key, IV);

        String recoveredPlaintext = new String(decryptedData);
        
        PrintWriter decryptOut = new PrintWriter("C:/Users/Garrison/Documents/recoveredPlaintext.txt");
        decryptOut.println(recoveredPlaintext);
        
        decryptOut.close();
        
        System.out.println(plaintext);
        System.out.println(ciphertext);
        System.out.println(recoveredPlaintext);
    }	
	
	private static byte[] cipherData(PaddedBufferedBlockCipher cipher, byte[] data)
	        throws Exception
	{
	    int minSize = cipher.getOutputSize(data.length);
	    byte[] outBuf = new byte[minSize];
	    int length1 = cipher.processBytes(data, 0, data.length, outBuf, 0);
	    int length2 = cipher.doFinal(outBuf, length1);
	    int actualLength = length1 + length2;
	    byte[] result = new byte[actualLength];
	    System.arraycopy(outBuf, 0, result, 0, result.length);
	    return result;
	}

	private static byte[] decrypt(byte[] cipher, byte[] key, byte[] iv) throws Exception
	{
	    PaddedBufferedBlockCipher aes = new PaddedBufferedBlockCipher(new CBCBlockCipher(
	            new AESEngine()));
	    CipherParameters ivAndKey = new ParametersWithIV(new KeyParameter(key), iv);
	    aes.init(false, ivAndKey);
	    return cipherData(aes, cipher);
	}

	private static byte[] encrypt(byte[] plain, byte[] key, byte[] iv) throws Exception
	{
	    PaddedBufferedBlockCipher aes = new PaddedBufferedBlockCipher(new CBCBlockCipher(
	            new AESEngine()));
	    CipherParameters ivAndKey = new ParametersWithIV(new KeyParameter(key), iv);
	    aes.init(true, ivAndKey);
	    return cipherData(aes, plain);
	}
	
	private static byte [] generateIV(Cipher cipher) throws Exception {
        byte [] ivBytes = new byte[cipher.getBlockSize()];
        random.nextBytes(ivBytes);
        return ivBytes;
    }
	
	private static byte [] generateKey(Cipher cipher) throws Exception {
        byte [] keyBytes = new byte[32];
        random.nextBytes(keyBytes);
        return keyBytes;
    }
	
	private static final SecureRandom random = new SecureRandom();
}
